server.port=8884
server.shutdown=graceful
spring.lifecycle.timeout-per-shutdown-phase=20s

spring.cloud.gateway.enabled=true
#开启从注册中心动态创建路由的功能，利用微服务名称进行路由
spring.cloud.gateway.discovery.locator.enabled=true
#允许跨域访问
spring.cloud.gateway.globalcors.cors-configurations.[/**].allow-credentials=true
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-origins=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-headers=*
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods[0]=OPTIONS
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods[1]=GET
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods[2]=POST
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods[3]=PUT
spring.cloud.gateway.globalcors.cors-configurations.[/**].allowed-methods[4]=DELETE

#订单路由
spring.cloud.gateway.routes[0].id=route-service-order
#需要转发的地址  lb:使用nacos本地的负载均衡策略
spring.cloud.gateway.routes[0].uri=lb://service-order
#断言规则 用于路由规则的匹配
spring.cloud.gateway.routes[0].predicates[0]=Path=/service-order/**
spring.cloud.gateway.routes[0].predicates[1]=Method=GET,POST
#过滤器,对请求和响应进行修改处理,过滤器,对请求和响应进行修改处理,转发之前去掉第一层路由
spring.cloud.gateway.routes[0].filters[0]=StripPrefix=1
#请求重试
spring.cloud.gateway.routes[0].filters[1].name=Retry
#重试次数
spring.cloud.gateway.routes[0].filters[1].args.retries=3
#需要重试的错误(5xx)
spring.cloud.gateway.routes[0].filters[1].args.series=SERVER_ERROR
#成功的请求状态码
spring.cloud.gateway.routes[0].filters[1].args.statuses=OK
#需要重试的方法
spring.cloud.gateway.routes[0].filters[1].args.methods=GET

#库存路由
spring.cloud.gateway.routes[1].id=route-service-stock
spring.cloud.gateway.routes[1].uri=lb://service-stock
spring.cloud.gateway.routes[1].predicates[0]=Path=/service-stock/**
spring.cloud.gateway.routes[1].predicates[1]=Method=GET,POST
spring.cloud.gateway.routes[1].filters[0]=StripPrefix=1
spring.cloud.gateway.routes[1].filters[1].name=Retry
spring.cloud.gateway.routes[1].filters[1].args.retries=3
spring.cloud.gateway.routes[1].filters[1].args.series=SERVER_ERROR
spring.cloud.gateway.routes[1].filters[1].args.statuses=OK
spring.cloud.gateway.routes[1].filters[1].args.methods=GET

#日志服务
spring.cloud.gateway.routes[2].id=route-service-log
spring.cloud.gateway.routes[2].uri=lb://service-log
spring.cloud.gateway.routes[2].predicates[0]=Path=/service-log/**
spring.cloud.gateway.routes[2].predicates[1]=Method=GET,POST
spring.cloud.gateway.routes[2].filters[0]=StripPrefix=1

#配置seata的注册中心
seata.enabled=true
seata.application-id=${spring.application.name}
#配置事务分组,根据这个获取tc服务的cluster名称
seata.tx-service-group=default_tx_group
#配置seata的配置中心
seata.config.type=nacos
seata.config.nacos.group=DEFAULT_GROUP
seata.config.nacos.namespace=
seata.config.nacos.username=nacos
seata.config.nacos.password=nacos
seata.config.nacos.server-addr=192.168.181.131:8848
seata.registry.type=nacos
seata.registry.nacos.application=seata-server
seata.registry.nacos.group=DEFAULT_GROUP
seata.registry.nacos.namespace=
seata.registry.nacos.username=nacos
seata.registry.nacos.password=nacos
seata.registry.nacos.server-addr=192.168.181.131:8848
#事务组与TC服务cluster的映射关系
seata.service.vgroupMapping.default_tx_group=default